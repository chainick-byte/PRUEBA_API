/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pruebaTech.demo;

import com.pruebaTech.demo.DTO.ErroresResponse;
import com.pruebaTech.demo.configuration.TestingConfig;
import com.pruebaTech.demo.utils.Constantes;
import com.pruebaTech.demo.validaciones.ValidacionService;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

/**
 *
 * @author igorr
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = TestingConfig.class)
public class ValidacionServiceTest {

    // @Autowired
    // private ValidacionService validacionService;
    String urlOK = "https://kata-espublicotech.g3stiona.com:443/v1/orders",
           urlKOK = "ht://kata-espublicotech.g3stiona.com:443/v1/orders",
           urlNullOVacia = "", 
           urlSinBarraOrder = "https://kata-espublicotech.g3stiona.com:443/v1/ordrs", 
           UrlLArga = "https://www.ejemplo.com/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/"
            + "1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/1234567890/";

    @Test
    public void testValidarUrlOrdersEntrada_UrlValida() {
        ValidacionService validacionService = new ValidacionService();
        ErroresResponse resultado = validacionService.validarUrlEntrada(urlOK, Constantes.VER_ORDERS);
        assertNull(resultado);
    }
    
    @Test
    public void testValidarUrlOrdersEntrada_UrlNullOVacia() {
        ValidacionService validacionService = new ValidacionService();
        ErroresResponse resultado = validacionService.validarUrlEntrada(urlNullOVacia, Constantes.VER_ORDERS);
        assertNotNull(resultado);
        assertEquals(Constantes.ERROR_100003, resultado.getCodigErrorPersonalizado());

    }

    @Test
    public void testValidarUrlOrdersEntrada_UrlValidaNoFormato() {
        ValidacionService validacionService = new ValidacionService();
        ErroresResponse resultado = validacionService.validarUrlEntrada(urlKOK, Constantes.VER_ORDERS);
        assertNotNull(resultado);
        assertEquals(Constantes.ERROR_100005, resultado.getCodigErrorPersonalizado());

    }
    
    @Test
    public void testValidarUrlOrdersEntrada_UrlLongitud() {
        ValidacionService validacionService = new ValidacionService();
        ErroresResponse resultado = validacionService.validarUrlEntrada(UrlLArga, Constantes.VER_ORDERS);
        assertNotNull(resultado);
        assertEquals(Constantes.ERROR_100004, resultado.getCodigErrorPersonalizado());

    }
    
    @Test
    public void testValidarUrlOrdersEntrada_UrlNoEsperada() {
        ValidacionService validacionService = new ValidacionService();
        ErroresResponse resultado = validacionService.validarUrlEntrada(urlSinBarraOrder, Constantes.VER_ORDERS_PAGINADOS);
        assertNotNull(resultado);
        assertEquals(Constantes.ERROR_010002, resultado.getCodigErrorPersonalizado());

    }

    
}
